dplyr::mutate(k_max = forcats::as_factor(k_max)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = fa, color = k_max
)) +
ggplot2::ylab("Sn") +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::facet_grid(rows = vars(k_max))
g_saw_d
g_dirichlet <- k_long |>
dplyr::filter(kernel == "Dn") |>
dplyr::rename(Dn = value) |>
dplyr::mutate(n = forcats::as_factor(k_idx)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Dn, color = n
)) +
ggplot2::geom_line() +
ggplot2::facet_grid(rows = vars(n))
g_dirichlet
g_fejer <- k_long |>
dplyr::filter(kernel == "Fn") |>
dplyr::rename(Fn = value) |>
dplyr::mutate(n = forcats::as_factor(k_idx)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Fn, color = n
)) +
ggplot2::geom_line() +
ggplot2::facet_grid(rows = vars(n))
g_fejer
# initialize tibble (fn, k_max, theta, t, fa)
saw_f <- pf_long |>
dplyr::filter(fn == "saw") |>
dplyr::rename(theta = x, fa = value) |>
dplyr::mutate(k_max = 0L) |>
dplyr::select(fn, k_max, theta, t, fa)
# accumulate approximations per kernel index
for (k_idx in k_maxima) {
fa_tmp <- window_approx(
fn        = "saw",
cs_fn_lst = saw_cs_fns(),
n_grid    = n_pos_pts,
k_vec     = 0:k_idx,
include_upper = TRUE
)
# stack approximations
saw_f <- saw_f |>
dplyr::bind_rows(fa_tmp)
}
# stack Dirichlet approx atop Fejér approx
saw_d_f <- saw_d |>
dplyr::mutate(kernel = "Dn") |>
dplyr::select(kernel, everything()) |>
dplyr::bind_rows( saw_f |>
dplyr::mutate(kernel = "Fn") |>
dplyr::select(kernel, everything())
)
g_saw_d_f <- saw_d_f |>
dplyr::mutate(
n    = forcats::as_factor(k_max),
kernel = forcats::as_factor(kernel)
) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = fa, color = n
)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::facet_grid(
rows = vars(n),
cols = vars(kernel)
)
g_saw_d_f
# show negative side lobes of Hann kernel
k_low <- 3L
k_vec <- c(k_low, k_maxima)
# num sample points in (0, pi/2)
n_x_pts <- 90L
hk_long <- tibble::tibble()
for (k_idx in k_vec) {
tmp_tbl <- hann_kernel_tbl(
k_max = k_idx,
i_add = n_x_pts %/% k_idx
) |>
dplyr::mutate(k_idx = k_idx) |>
dplyr::select(k_idx, everything())
hk_long <- hk_long |>
dplyr::bind_rows(tmp_tbl)
}
hk_low <- hk_long |>
dplyr::filter(k_idx == k_low)
# zoom in on negative side lobes
# hk_low |>
#   slice_min(order_by = Hn, n = 12) |>
#   arrange(theta) |>
#   select(- k_idx)
g_hk_low <- hk_long |>
dplyr::filter(k_idx == k_low) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Hn
)) +
ggplot2::geom_line() +
ggplot2::ylab(paste0("H", k_low))
g_hk_low
g_hk_2 <- hk_long |>
dplyr::filter(k_idx != k_low) |>
dplyr::mutate(n = forcats::as_factor(k_idx)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Hn, color = n
)) +
ggplot2::geom_line() +
ggplot2::facet_grid(rows = vars(n))
g_hk_2
# modify approx degree to match m_periods
saw_fft_approx <- pf_wide$ saw |>
fft_approx(
degree = m_periods * k_maxima)
saw_approx <- saw_fft_approx |>
dplyr::mutate(
theta = rep(pf_wide$ x, times = 1L + length(k_maxima)),
Sn = Re(z_x)
) |>
dplyr::select(d, theta, Sn)
g_saw_approx <- saw_approx |>
dplyr::mutate(
n = dplyr::case_when(
d %in% (m_periods * k_maxima) ~ d %/% m_periods,
TRUE                          ~ 0L
),
n = forcats::as_factor(n)
) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Sn, color = n
)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::facet_grid(rows = vars(n))
g_saw_approx
symbol_tbl <- get_symbol_tbl()
# save file only when updated
save_to_file <- TRUE
if (save_to_file) {
# RDS format
symbol_tbl |> readr::write_rds(here::here(
"data", "retain", "symbol_tbl.rds"
))
# TSV format
symbol_tbl |> readr::write_tsv(here::here(
"data", "retain", "symbol_tbl.txt"
))
}
symbol_tbl |>
dplyr::select(symbol, dscr) |>
knitr::kable(
format = "html",
escape = FALSE,
caption = "Glossary of Mathematical Symbols (s)",
col.names = c("s", "description")
)
books_tbl <- get_books_tbl() |>
dplyr::arrange(title)
# save file only when updated
save_to_file <- TRUE
if (save_to_file) {
# RDS format
books_tbl |> readr::write_rds(here::here(
"data", "retain", "books_tbl.rds"
))
# TSV format
books_tbl |> readr::write_tsv(here::here(
"data", "retain", "books_tbl.txt"
))
}
books_tbl |>
list_links(a_idx = 3L) |>
knitr::kable(
format    = "html",
escape    = FALSE,
col.names = ""
)
articles_tbl <- get_articles_tbl() |>
dplyr::arrange(title)
# save file only when updated
save_to_file <- TRUE
if (save_to_file) {
# RDS format
articles_tbl |> readr::write_rds(here::here(
"data", "retain", "articles_tbl.rds"
))
# TSV format
articles_tbl |> readr::write_tsv(here::here(
"data", "retain", "articles_tbl.txt"
))
}
articles_tbl |>
list_links() |>
knitr::kable(
format    = "html",
escape    = FALSE,
col.names = ""
)
knitr::opts_chunk$set(
echo    = FALSE,
error   = FALSE,
message = FALSE,
warning = FALSE
)
library(assertthat)
library(here)
library(knitr)
library(latex2exp)
library(tidyverse)
library(tinytex)
# library(ugrid)
# fft_approx
# low-frequency approximation via FFT
source(here("code", "fft_approx.R"))
# get_ref_materials
# enscapsulate reference materials as separate modules
source(here("code", "get_ref_materials.R"))
# kernel_fns
# kernel functions: Dirichlet, Fejér, etc.
source(here("code", "kernel_fns.R"))
# pf_factory
# create and display periodic functions
source(here("code", "pf_factory.R"))
# u_grid
# generate equispaced points within unit interval
# source(here("code", "u_grid.R"))
# unit_testing
# test the source code in this directory
source(here("code", "unit_testing.R"))
# x_rotate
# circular rotation of vector x[1:n]
source(here("code", "x_rotate.R"))
# xl_data_hdr
# read Excel tab when data are separated from col names
# source(here("code", "xl_data_hdr.R"))
# xmpl_fns
# a few selected periodic, piecewise linear functions
source(here("code", "xmpl_fns.R"))
n_pos_pts <- 121L # yields 2n+1 = 3^k points
k_maxima  <- c(9L, 25L) # kernel indices
m_periods <- 2L # duplicate periods for illustration
# (-1, 1) interior points
u_vec <- (-n_pos_pts:n_pos_pts) / (n_pos_pts + 1L)
# grid-points in (-m pi, m pi), m = m_periods
x_vec <- u_vec * (m_periods * pi)
# initialize tibble of Dirichlet and Fejér kernel functions
k_long <- tibble::tibble()
# calculate long tibble per kernel index and stack results
for (idx in k_maxima) {
tmp_lst <- list_kernel_tbls(
n_grid = n_pos_pts,
k_max  = idx
)
k_long <- k_long |>
dplyr::bind_rows(
tmp_lst$ krnl_long |>
# record kernel index
dplyr::mutate(k_idx = idx) |>
dplyr::select(k_idx, everything())
)
}
xmpl_fn_lst <- xmpl_pf_tst(x = x_vec)
pf_wide    <- xmpl_fn_lst$ x_pf_wide
pf_long    <- xmpl_fn_lst$ x_pf_long
g_xmpl_fns <- xmpl_fn_lst$ g_x_pf +
ggplot2::xlab("theta")
g_xmpl_fns
ps_pf_tbl <- tibble::tibble(
fn = c("sawtooth", "square wave", "triangular wave"),
idx = c(
"$\\; \\nu \\ge 1 \\;$",
"$\\; (2 \\nu - 1) \\ge 1 \\;$",
"$\\; (2 \\nu - 1) \\ge 1 \\;$"
),
term = c(
"$\\; 2 (-1)^{\\nu - 1} \\sin (\\nu \\theta) / \\nu \\;$",
"$\\; 4 \\sin ((2 \\nu - 1) \\theta) / ((2 \\nu - 1) \\pi) \\;$",
"$\\; 4 \\cos ((2 \\nu - 1) \\theta) / ((2 \\nu - 1)^2 \\pi) \\;$"
)
)
ps_pf_tbl |>
knitr::kable(
format = "html",
escape = FALSE,
caption = "Fourier approximation formulas",
col.names = c("function", "index", "term")
)
xmpl_cs_lst <- xmpl_cs_tst(k_vec = 0:15)
xmpl_cs_lst$ g_coeff
# initialize saw_d = tibble(fn, k_max, theta, t, fa)
saw_d <- pf_long |>
dplyr::filter(fn == "saw") |>
dplyr::rename(theta = x, fa = value) |>
dplyr::mutate(k_max = 0L) |>
dplyr::select(fn, k_max, theta, t, fa)
# functions that generate (cos, sin) coefficients
cs_fn_lst <- saw_cs_fns()
# accumulate approximations per kernel index
for (k_idx in k_maxima) {
fa_temp <- dirichlet_approx(
fn        = "saw",
cs_fn_lst = cs_fn_lst,
n_grid    = n_pos_pts,
k_vec     = 0:k_idx,
include_upper = TRUE
)
# stack approximations
saw_d <- saw_d |>
dplyr::bind_rows(fa_temp)
}
# remove objects having generic names
rm(cs_fn_lst)
g_saw_d <- saw_d |>
dplyr::mutate(k_max = forcats::as_factor(k_max)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = fa, color = k_max
)) +
ggplot2::ylab("Sn") +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::facet_grid(rows = vars(k_max))
g_saw_d
g_dirichlet <- k_long |>
dplyr::filter(kernel == "Dn") |>
dplyr::rename(Dn = value) |>
dplyr::mutate(n = forcats::as_factor(k_idx)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Dn, color = n
)) +
ggplot2::geom_line() +
ggplot2::facet_grid(rows = vars(n))
g_dirichlet
g_fejer <- k_long |>
dplyr::filter(kernel == "Fn") |>
dplyr::rename(Fn = value) |>
dplyr::mutate(n = forcats::as_factor(k_idx)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Fn, color = n
)) +
ggplot2::geom_line() +
ggplot2::facet_grid(rows = vars(n))
g_fejer
# initialize tibble (fn, k_max, theta, t, fa)
saw_f <- pf_long |>
dplyr::filter(fn == "saw") |>
dplyr::rename(theta = x, fa = value) |>
dplyr::mutate(k_max = 0L) |>
dplyr::select(fn, k_max, theta, t, fa)
# accumulate approximations per kernel index
for (k_idx in k_maxima) {
fa_tmp <- window_approx(
fn        = "saw",
cs_fn_lst = saw_cs_fns(),
n_grid    = n_pos_pts,
k_vec     = 0:k_idx,
include_upper = TRUE
)
# stack approximations
saw_f <- saw_f |>
dplyr::bind_rows(fa_tmp)
}
# stack Dirichlet approx atop Fejér approx
saw_d_f <- saw_d |>
dplyr::mutate(kernel = "Dn") |>
dplyr::select(kernel, everything()) |>
dplyr::bind_rows( saw_f |>
dplyr::mutate(kernel = "Fn") |>
dplyr::select(kernel, everything())
)
g_saw_d_f <- saw_d_f |>
dplyr::mutate(
n    = forcats::as_factor(k_max),
kernel = forcats::as_factor(kernel)
) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = fa, color = n
)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::facet_grid(
rows = vars(n),
cols = vars(kernel)
)
g_saw_d_f
# show negative side lobes of Hann kernel
k_low <- 3L
k_vec <- c(k_low, k_maxima)
# num sample points in (0, pi/2)
n_x_pts <- 90L
hk_long <- tibble::tibble()
for (k_idx in k_vec) {
tmp_tbl <- hann_kernel_tbl(
k_max = k_idx,
i_add = n_x_pts %/% k_idx
) |>
dplyr::mutate(k_idx = k_idx) |>
dplyr::select(k_idx, everything())
hk_long <- hk_long |>
dplyr::bind_rows(tmp_tbl)
}
hk_low <- hk_long |>
dplyr::filter(k_idx == k_low)
# zoom in on negative side lobes
# hk_low |>
#   slice_min(order_by = Hn, n = 12) |>
#   arrange(theta) |>
#   select(- k_idx)
g_hk_low <- hk_long |>
dplyr::filter(k_idx == k_low) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Hn
)) +
ggplot2::geom_line() +
ggplot2::ylab(paste0("H", k_low))
g_hk_low
g_hk_2 <- hk_long |>
dplyr::filter(k_idx != k_low) |>
dplyr::mutate(n = forcats::as_factor(k_idx)) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Hn, color = n
)) +
ggplot2::geom_line() +
ggplot2::facet_grid(rows = vars(n))
g_hk_2
# modify approx degree to match m_periods
saw_fft_approx <- pf_wide$ saw |>
fft_approx(
degree = m_periods * k_maxima)
saw_approx <- saw_fft_approx |>
dplyr::mutate(
theta = rep(pf_wide$ x, times = 1L + length(k_maxima)),
Sn = Re(z_x)
) |>
dplyr::select(d, theta, Sn)
g_saw_approx <- saw_approx |>
dplyr::mutate(
n = dplyr::case_when(
d %in% (m_periods * k_maxima) ~ d %/% m_periods,
TRUE                          ~ 0L
),
n = forcats::as_factor(n)
) |>
ggplot2::ggplot(mapping = aes(
x = theta, y = Sn, color = n
)) +
ggplot2::geom_line(show.legend = FALSE) +
ggplot2::facet_grid(rows = vars(n))
g_saw_approx
symbol_tbl <- get_symbol_tbl()
# save file only when updated
save_to_file <- TRUE
if (save_to_file) {
# RDS format
symbol_tbl |> readr::write_rds(here::here(
"data", "retain", "symbol_tbl.rds"
))
# TSV format
symbol_tbl |> readr::write_tsv(here::here(
"data", "retain", "symbol_tbl.txt"
))
}
symbol_tbl |>
dplyr::select(symbol, dscr) |>
knitr::kable(
format = "html",
escape = FALSE,
caption = "Glossary of Mathematical Symbols (s)",
col.names = c("s", "description")
)
books_tbl <- get_books_tbl() |>
dplyr::arrange(title)
# save file only when updated
save_to_file <- FALSE
if (save_to_file) {
# RDS format
books_tbl |> readr::write_rds(here::here(
"data", "retain", "books_tbl.rds"
))
# TSV format
books_tbl |> readr::write_tsv(here::here(
"data", "retain", "books_tbl.txt"
))
}
books_tbl |>
list_links(a_idx = 3L) |>
knitr::kable(
format    = "html",
escape    = FALSE,
col.names = ""
)
articles_tbl <- get_articles_tbl() |>
dplyr::arrange(title)
# save file only when updated
save_to_file <- FALSE
if (save_to_file) {
# RDS format
articles_tbl |> readr::write_rds(here::here(
"data", "retain", "articles_tbl.rds"
))
# TSV format
articles_tbl |> readr::write_tsv(here::here(
"data", "retain", "articles_tbl.txt"
))
}
articles_tbl |>
list_links() |>
knitr::kable(
format    = "html",
escape    = FALSE,
col.names = ""
)
install.packages("devtools")
library(devtools)
devtools::install_github("FinYang/tsdl")
devtools::install_github("FinYang/tsdl")
install.packages("Rtools")
